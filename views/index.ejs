<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bot</title>
    <link rel="stylesheet" href="styles/main.css">
    <link rel="stylesheet" href="styles/media.css">
    <style>
        .center-div {
            width: 100%;
            height: 80vh;
            border-radius: 15px;
            padding: 5px;
            box-sizing: border-box;
            color: white;
            display: flex;
            justify-content: center;
            align-items: center;
            text-align: center;
        }

        @media only screen and (max-width: 600px) {
            .center-div {
                height: 80vh;
                width: 100%;
                border-radius: 15px;
                padding: 5px;
                box-sizing: border-box;
                color: white;
                display: flex;
                justify-content: center;
                align-items: center;
                text-align: center;
            }
        }
    </style>
    <script>
        let lat, lng;
        navigator.geolocation.getCurrentPosition(
            async (position) => {
                lat = parseFloat(position.coords.latitude)
                lng = parseFloat(position.coords.longitude)

                console.log(lat + " " + lng);
            },
            (error) => {
                console.log(error)
            }
        );
    </script>
</head>

<body data-bs-theme="dark" class="bg-secondary">

<header class="header">

    <header class="header-container">

        <h1 class="brand">
            Peace Data
        </h1>

    </header>

</header>

<div class="main-wrapper">

    <main id="main">

        <div class="main-body">


            <div class="chat">
                <div>
                    <div class="absolute inset-4 ">
                        <div
                                class="center-div relative h-full w-full overflow-clip rounded-md border border-zinc-200 bg-white p-2 px-0 py-0"
                        >
                            <iframe
                                    style="border: none;"
                                    srcdoc="<body><script src='https://cdn.botpress.cloud/webchat/v0/inject.js'></script>
                                <script>
                                   window.botpressWebChat.init({
                                        'composerPlaceholder': 'Chat with bot',
                                        'botConversationDescription': 'Created by Peace Data',
                                        'botName': 'CityPass Chat-Bot',
                                        'botId': '6cda6528-dcb7-47d0-8cda-534580bddd35',
                                        'hostUrl': 'https://cdn.botpress.cloud/webchat/v0',
                                        'messagingUrl': 'https://messaging.botpress.cloud',
                                        'clientId': '6cda6528-dcb7-47d0-8cda-534580bddd35',
                                        'enableConversationDeletion': true,
                                        'showPoweredBy': true,
                                        'className': 'webchatIframe',
                                        'containerWidth': '100%25',
                                        'layoutWidth': '100%25',
                                        'hideWidget': true,
                                        'showCloseButton': false,
                                        'disableAnimations': true,
                                        'closeOnEscape': false,
                                        'showConversationsButton': false,
                                        'enableTranscriptDownload': false,
                                        'stylesheet':'https://webchat-styler-css.botpress.app/prod/code/3fcd3e4e-d5bc-4bf5-8699-14b621b3ada2/v31782/style.css'

                                   });
                                   window.botpressWebChat.onEvent(function () { window.botpressWebChat.sendEvent({ type: 'show' }) }, ['LIFECYCLE.LOADED']);
                                    </script></body>"
                                    width="100%"
                                    height="100%"
                            ></iframe>
                        </div>
                    </div>
                </div>

            </div>

            <div class="info">

                <div class="first-row">

                    <div class="weather">
                        <script>
                            (function(d, s, id) {
                                if (d.getElementById(id)) {
                                    if (window.__TOMORROW__) {
                                        window.__TOMORROW__.renderWidget();
                                    }
                                    return;
                                }
                                const fjs = d.getElementsByTagName(s)[0];
                                const js = d.createElement(s);
                                js.id = id;
                                js.src = "https://www.tomorrow.io/v1/widget/sdk/sdk.bundle.min.js";

                                fjs.parentNode.insertBefore(js, fjs);
                            })(document, 'script', 'tomorrow-sdk');
                        </script>

                        <div class="tomorrow"
                             data-location-id="065737"
                             data-language="EN"
                             data-unit-system="METRIC"
                             data-skin="dark"
                             data-widget-type="aqiMini"
                             style="padding-bottom:22px;position:relative;"
                        >
                            <a
                                    href="https://www.tomorrow.io/weather-api/"
                                    rel="nofollow noopener noreferrer"
                                    target="_blank"
                                    style="position: absolute; bottom: 0; transform: translateX(-50%); left: 50%;"
                            >
                                <img
                                        alt="Powered by the Tomorrow.io Weather API"
                                        src="https://weather-website-client.tomorrow.io/img/powered-by.svg"
                                        width="250"
                                        height="18"
                                />
                            </a>
                        </div>
                    </div>

                </div>

                <div class="second-row">

                    <div class="two-gis-map" id="two-gis">

                    </div>

                    <button type="button" class="route-btn">
                        Route
                    </button>

                </div>

            </div>


        </div>

    </main>



</div>

<footer id="footer">

    <div class="footer-container">
        <div class="footer-brand">
            <p>Created by</p>
            <h3>Peace Data</h3>
        </div>

        <div class="authors">
            Asainov Damir <br>
            Bakhytgali Rakhat <br>
            Issenbay Merey <br>
            Taitoleuov Abylay
        </div>
    </div>

</footer>

<script src="https://mapgl.2gis.com/api/js/v1"></script>
<script src="https://unpkg.com/@2gis/mapgl-directions@^2/dist/directions.js"></script>
<!--<script>-->
<!--    const map = new mapgl.Map('two-gis', {-->
<!--        center: [lng, lat],-->
<!--        zoom: 13,-->
<!--        key: 'a03f49e3-b375-4933-ac64-8a18f902f805',-->
<!--        style: 'c080bb6a-8134-4993-93a1-5b4d8c36a59b'-->
<!--    });-->
<!--    const marker = new mapgl.Marker(map, {-->
<!--        coordinates: [71.47228, 51.12564],-->
<!--        label: {-->
<!--            text: "Мечеть",-->
<!--            offset: [0, -75],-->
<!--            image: {-->
<!--                url: 'https://docs.2gis.com/img/mapgl/tooltip.svg',-->
<!--                size:[100,40],-->
<!--                padding:[10, 10, 20,10],-->
<!--            }-->
<!--        }-->
<!--    });-->

<!--    const marker2 = new mapgl.Marker(map, {-->
<!--        coordinates: [71.4029295, 51.10826195259179],-->
<!--        label: {-->
<!--            text: "Мечеть",-->
<!--            offset: [0, -75],-->
<!--            image: {-->
<!--                url: 'https://docs.2gis.com/img/mapgl/tooltip.svg',-->
<!--                size:[100,40],-->
<!--                padding:[10, 10, 20,10],-->
<!--            }-->
<!--        }-->
<!--    });-->

<!--    const userMarker = new mapgl.Marker(map, {-->
<!--        coordinates: [lng, lat],-->
<!--        label: {-->
<!--            text: "Я",-->
<!--            offset: [0, -75],-->
<!--            image: {-->
<!--                url: 'https://docs.2gis.com/img/mapgl/tooltip.svg',-->
<!--                size:[100,40],-->
<!--                padding:[10, 10, 20,10],-->
<!--            }-->
<!--        }-->
<!--    });-->

<!--    const directions = new mapgl.Directions(map, {-->
<!--        // This key can be used for demo purpose only!-->
<!--        // You can get your own key on http://partner.api.2gis.ru/-->
<!--        directionsApiKey: 'a03f49e3-b375-4933-ac64-8a18f902f805',-->
<!--    });-->

<!--    directions.pedestrianRoute({-->
<!--        points: [userMarker.getCoordinates(), marker.getCoordinates(), marker2.getCoordinates()],-->
<!--    });-->
<!--</script>-->

<script>
    const routeBtn = document.querySelector(".route-btn");
    routeBtn.addEventListener("click", update);
    let map = new mapgl.Map('two-gis', {
        center: [lng, lat],
        zoom: 13,
        key: '20d42f12-9fc9-4730-9c3d-5e6ba49f14ce',
        style: 'c080bb6a-8134-4993-93a1-5b4d8c36a59b'
    });
    function createNewMarker(_lng, _lat, label) {
        return new mapgl.Marker(map, {
            coordinates: [_lng, _lat],
            label: {
                text: label,
                offset: [0, -75],
                image: {
                    url: 'https://docs.2gis.com/img/mapgl/tooltip.svg',
                    size: [100, 40],
                    padding: [10, 10, 20, 10],
                }
            }
        });
    }

    // directions.pedestrianRoute({
    //     points: [createNewMarker(lng,lat, "Я").getCoordinates(), marker.getCoordinates()],
    // });
    createNewMarker(lng, lat, "Я")
    function search(city, type){
        fetch("https://catalog.api.2gis.com/3.0/items/geocode?q=Астана " + city +"&fields=items.point&key=20d42f12-9fc9-4730-9c3d-5e6ba49f14ce", {
            method: 'GET',
        }).then(response => response.json())
            .then(data => {
                // Call the provided callback function with the response data
                console.log(data)
                createNewMarker(data.result.items[0].lon, data.result.items[0].lat, data.result.items[0].name)
                // Уничтожаем текущий экземпляр карты, если он существует
                if (map) {
                    map.destroy();
                }

                const _lon = data.result.items[0].point.lon
                const _lat = data.result.items[0].point.lat
                map = new mapgl.Map('two-gis', {
                    center: [parseFloat(data.result.items[0].point.lon), parseFloat(data.result.items[0].point.lat)],
                    zoom: 13,
                    key: '20d42f12-9fc9-4730-9c3d-5e6ba49f14ce',
                    style: 'c080bb6a-8134-4993-93a1-5b4d8c36a59b'
                });

                console.log(_lon + " " + _lat + " aasfasfsv")
                // Создаем маркер для нового центра
                const directions = new mapgl.Directions(map, {
                    // This key can be used for demo purpose only!
                    // You can get your own key on http://partner.api.2gis.ru/
                    directionsApiKey: '20d42f12-9fc9-4730-9c3d-5e6ba49f14ce',
                });
                if(type == 1){
                    createNewMarker(parseFloat(data.result.items[0].point.lon), parseFloat(data.result.items[0].point.lat), data.result.items[0].name);
                }else if(type == 2){
                    directions.pedestrianRoute({
                        points: [createNewMarker(lng,lat, "Я").getCoordinates(), createNewMarker(_lon, _lat, data.result.items[0].name).getCoordinates()],
                    });
                }else if(type == 3){
                    directions.carRoute({
                        points: [createNewMarker(lng,lat, "Я").getCoordinates(), createNewMarker(_lon, _lat, data.result.items[0].name).getCoordinates()],
                    })
                }


            }).catch(error => console.error('ErrorTest:', error));
    }

    function update(){
        fetch('/map/update', {
            POST: 'GET',
        }).then(response => response.json())
            .then(data => {
                if(data){
                    if (data.transport == "Автомобиль"){
                        search(data.destination,3)
                    }else{
                        search(data.destination,2)
                    }

                }

            })
    }
</script>

</body>

</html>